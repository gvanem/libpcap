#
# GNU Makefile for DOS-libpcap. djgpp 2.04+ version.
#
# Use this makefile from the libpcap root directory.
# E.g. like this:
#
#   c:\net\pcap> make -f msdos/Makefile.dj
#
# Note 1:
#   under plain DOS, you should do a "set LFN=y" first.
#
# Note 2:
#  If using this makefile under Windows (ref. 'DJ_PREFIX' below),
#  remember to do a 'make -f msdos/Makefile.dj clean' first in case
#  there are any leftovers from a Win32 build.
#
THIS_FILE = msdos/Makefile.dj

# VPATH = missing msdos testprogs

VPATH = msdos testprogs

WATT32_ROOT = $(realpath $(WATT_ROOT))

OBJ_DIR = djgpp.obj

#
# Set "HAVE_PCAP_REMOTE=1" to enable remote packet-capture
# (nearly impossible on DOS).
#
HAVE_PCAP_REMOTE ?= 1

#
# Defines 'BDEBUG' and 'YYDEBUG'.
# See below.
#
PCAP_DEBUG ?= 0

#
# Set to 1 to create a detailed map-file.
#
MAKE_MAPFILE = 1

ifeq ($(OS),Windows_NT)
  #
  # Windows hosted djgpp cross compiler. Get it from:
  #   https://github.com/andrewwutw/build-djgpp/releases
  #
  # And set 'DJ_PREFIX' according to the 'c:/djgpp_cross_install_root'.
  #
  DJ_PREFIX ?= c:/djgpp_cross_install_root/bin/i586-pc-msdosdjgpp-
  CC = $(DJ_PREFIX)gcc

  #
  # A MinGW or a CygWin 'gcc' MUST be used to create 'msdos/bin2c.exe'.
  #
  HOST_CC = gcc
  IS_WINDOWS_HOSTED = 1

else
  #
  # The normal djgpp 'gcc' for MSDOS.
  #
  CC      = gcc
  HOST_CC = $(CC)
  IS_WINDOWS_HOSTED = 0
endif

ifeq ($(IS_WINDOWS_HOSTED),1)
  #
  # The following codes used in macro 'colour_msg' assumes you have
  # MSys/Cygwin's echo with colour support.
  #
  BRIGHT_GREEN = \e[1;32m
  BRIGHT_WHITE = \e[1;33m

  colour_msg = @echo -e '$(1)\e[0m'
  green_msg  = $(call colour_msg,$(BRIGHT_GREEN)$(strip $(1)))
else
  green_msg = @echo "$(1)"
endif

ASM  = nasm -fbin -dDEBUG
YACC = bison -p pcap_
FLEX = flex -P pcap_

CFLAGS = -g -O2 -Wall -I./msdos -I. -I$(WATT32_ROOT)/inc \
         -DHAVE_CONFIG_H -Wno-unused-variable

ifneq ($(PCAP_DEBUG),0)
  CFLAGS += -DBDEBUG -DYYDEBUG=1
endif

PCAP_LIB = msdos/libpcap.a

GENERATED = msdos/config.h     \
            msdos/pkt_stub.inc \
            scanner.c          \
            scanner.h          \
            grammar.c          \
            grammar.h

SOURCES = bpf_filter.c  \
          bpf_image.c   \
          bpf_dump.c    \
          etherent.c    \
          fmtutils.c    \
          gencode.c     \
          grammar.c     \
          nametoaddr.c  \
          optimize.c    \
          pcap.c        \
          pcap-common.c \
          pcap-dos.c    \
          savefile.c    \
          sf-pcap.c     \
          sf-pcapng.c   \
          scanner.c     \
          msdos/pktdrvr.c

ifeq ($(HAVE_PCAP_REMOTE),1)
  VPATH   += missing
  CFLAGS  += -DLIBPCAP_REMOTE -DENABLE_REMOTE
  SOURCES += pcap-new.c pcap-rpcap.c sockutils.c rpcap-protocol.c \
             missing/strtok_r.c missing/asprintf.c

  REMOTE_OBJ_FILES = $(addprefix $(OBJ_DIR)/, \
                       pcap-new.o             \
                       pcap-rpcap.o           \
                       sockutils.o            \
                       rpcap-protocol.o)

  $(REMOTE_OBJ_FILES): CFLAGS += -DIN_REMOTE_C_FILES
endif

LIB_OBJ  = $(addprefix $(OBJ_DIR)/, $(notdir $(SOURCES:.c=.o)))
TEMP_BIN = tmp.bin

TARGETS = $(PCAP_LIB)            \
          can_set_rfmon_test.exe \
          capturetest.exe        \
          filtertest.exe         \
          findalldevstest.exe    \
          opentest.exe

#
# From the make manual, sec. 10.4:
#   You can prevent automatic deletion of an intermediate file by marking it as a secondary
#   file. To do this, list it as a prerequisite of the special target .SECONDARY. When a file
#   is secondary, make will not create the file merely because it does not already exist, but
#   make does not automatically delete the file.
#
TEST_OBJ = $(addprefix $(OBJ_DIR)/, \
             can_set_rfmon_test.o   \
             capturetest.o          \
             filtertest.o           \
             findalldevstest.o      \
             opentest.o)

.SECONDARY: $(TEST_OBJ)

all: $(GENERATED) $(OBJ_DIR) $(TARGETS)
	$(call green_msg, Welcome to libpcap/djgpp with samples.)

$(OBJ_DIR):
	- mkdir $@

$(PCAP_LIB): $(LIB_OBJ)
	rm -f $@
	ar rs $@ $^

$(OBJ_DIR)/%.o: %.c
	$(CC) -c $(CFLAGS) -o $@ $<
	@echo

$(OBJ_DIR)/%.o: %.s
	$(CC) -c $(CFLAGS) -x assembler-with-cpp -o $@ $<
	@echo

%.exe: $(OBJ_DIR)/%.o $(PCAP_LIB)
	$(call link_EXE, $@, $^ $(WATT32_ROOT)/lib/libwatt.a, $(@:.exe=.map))

msdos/pkt_stub.inc: msdos/bin2c.exe msdos/pkt_rx1.S
	$(ASM) -o $(TEMP_BIN) -l msdos/pkt_rx1.lst msdos/pkt_rx1.S
	msdos/bin2c $(TEMP_BIN) > $@
	rm -f $(TEMP_BIN)

grammar.h: grammar.c
grammar.c: grammar.y
	$(YACC) --yacc --output=$@ --defines=grammar.h $<
	@echo

scanner.h: scanner.c
scanner.c: scanner.l
	$(FLEX) --header-file=scanner.h --outfile=$@ $<
	@echo

msdos/config.h: $(THIS_FILE)
	$(call Generate_file, $@)
	$(file >> $@,$(CONFIG_H))

msdos/bin2c.exe: msdos/bin2c.c
	$(HOST_CC) $< -o $@

clean:
	rm -f $(LIB_OBJ) $(TEST_OBJ) $(GENERATED) msdos/pkt_rx1.lst msdos/bin2c.exe msdos/depend.dj

vclean: clean
	rm -f $(TARGETS) $(TARGETS:.exe=.map)
	-rmdir $(OBJ_DIR)

define CONFIG_H
  #ifndef msdos_config_h
  #define msdos_config_h

  #include <stdlib.h>

  #define DEBUG          1
  #define HAVE_STRERROR  1
  #define HAVE_STRLCAT   1
  #define HAVE_STRLCPY   1
  #define HAVE_SNPRINTF  1
  #define HAVE_VSNPRINTF 1
  #define _U_            __attribute__((unused))

  #if defined(ENABLE_REMOTE)
    #define SHUT_WR      1     /* Further sends are disallowed */
    #define suseconds_t  long  /* For the 'tv_usec' value of 'struct timeval' */

    #if defined(IN_REMOTE_C_FILES)
      #include <tcp.h>

      /* Redefine these since those functions are also in sockutils.c.
       */
      #undef  sock_recv
      #undef  sock_close
      #undef  sock_init
      #define sock_recv   sockutils_recv
      #define sock_close  socktils_close
      #define sock_init   socktils_init
    #endif
  #endif

  #define PACKAGE_VERSION  "libpcap version $(shell cat ./VERSION)"
  #endif
endef

#
# Create a file with header.
#  $(1): file to write to.
#
define Generate_file
  $(call green_msg, Generating $(1).)
  $(file  > $(1), /*)
  $(file >> $(1),  * Generated "$(strip $(1))" for djgpp.)
  $(file >> $(1),  * DO NOT EDIT. Edit $(realpath $(THIS_FILE)) instead.)
  $(file >> $(1),  */)
endef

ifeq ($(MAKE_MAPFILE),0)
  define link_EXE
    $(CC) -o $(1) $(2)
    @echo
  endef

else ifeq ($(IS_WINDOWS_HOSTED),1)
  #
  # A Windows-hosted 'gcc' will print a .map-file to 'stdout'.
  # Hence this special handling.
  #
  define link_EXE
    $(call green_msg, Linking $(1).)
    $(CC) -Wl,--print-map -o $(1) $(2) > $(3)
    @echo
  endef

else
  #
  # I assume under plain DOS, one has to use the 'redir' command
  # since 'stderr' is used to output a .map-file. That used to
  # be the case in the old days. But untested by me.
  #
  define link_EXE
    redir -e $(3) $(CC) -Wl,--print-map -o $(1) $(2)
    @echo
  endef
endif

#
# Manually generated dependencies
#
# msdos/pktdrvr.c: msdos/pkt_stub.inc
# grammar.h: grammar.y
# scanner.l: pcap-int.h pcap-namedb.h gencode.h grammar.h
# grammar.y: pcap-int.h gencode.h pcap-namedb.h

#
# Generate dependencies.
#
DEP_REPLACE = sed -e 's@\(.*\)\.o: @\n$$(OBJ_DIR)\/\1.o: @g' \
                  -e 's@$(WATT32_ROOT)@$$(WATT32_ROOT)@g'

depend: $(GENERATED)
	$(call green_msg, Generating dependencies for $(words $(SOURCES)) files.)
	$(CC) -MM $(CFLAGS) $(SOURCES) | $(DEP_REPLACE) > msdos/depend.dj

-include msdos/depend.dj

